#!/usr/bin/env python

import argparse
import datetime
import os
import sys

import repo
import output


LAST_RUN_DATE_FILE = '.lastrun'


def get_last_run_date():
    if not os.path.exists(LAST_RUN_DATE_FILE):
        # half a year back
        return datetime.datetime.now() - datetime.timedelta(30)

    with open(LAST_RUN_DATE_FILE, 'r') as f:
        last_date_str = f.readline()

        # go back one day to be really sure to not skip any commit
        return datetime.datetime.strptime(last_date_str, '%Y-%m-%d') - \
            datetime.timedelta(1)


def set_last_run_date():
    date = datetime.datetime.now()

    with open(LAST_RUN_DATE_FILE, 'w') as f:
        f.write(date.strftime('%Y-%m-%d'))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        'Get regression statistics of a DL-Learner setup')

    parser.add_argument('--csvout', dest='csvout', metavar='csvoutfile',
        help='enable CSV output and determine the target file')
    parser.add_argument(
        '--plot', dest='plotfile', metavar='plotfile',
        help='enables the generation of a plot showing the accuracy ' +
             'evolution and determines where it should be written ' +
             'to (file anme suffix defines the file format)')

    parser.add_argument(
        '--localrepo', dest='localrepo', action='store_const', const=True,
        help='repository already downloaded')

    parser.add_argument(
        '--branch', dest='branch', metavar='branch',
        help='the Git branch to use')

    parser.add_argument(
        'repo_dir', nargs=1,
        help='directory where the repo should be cloned to (or where the ' +
             'repo is located in case --localrepo is set)')

    parser.add_argument(
        'setupfile', nargs=1,
        help='a DL-Learner config or java file specifying the ' +
             'learning setup to run')

    parser.add_argument(
        'commits_since', nargs=1, help='timestamp in YYYY-MM-DD format')

    _args = parser.parse_args()

    repo_dir = _args.repo_dir[0]
    config_file = _args.setupfile[0]
    if _args.commits_since[0] == 'inc':
        since = get_last_run_date()
    else:
        since = datetime.datetime.strptime(_args.commits_since[0], '%Y-%m-%d')
    branch = _args.branch if _args.branch is not None else 'develop'
    already_cloned = True if _args.localrepo else False

    if not _args.csvout:
        print('You should at least define one output method!')
        parser.print_usage()
        sys.exit(0)

    accuracies, commit_shas = repo.main(repo_dir, config_file, since, branch,
                                        already_cloned)

    if _args.commits_since[0] == 'inc':
        set_last_run_date()

    if _args.csvout:
        output.write_csv(accuracies, commit_shas, _args.csvout)
